---
name: NextJS build and release
# description: lint, test, build and release NextJS
on: push

env:
  FORCE_COLOR: true # display terminal colors
  # APP_NAME: app_name
  # GHCR_IMAGE: ghcr.io/<user>/<repo name>
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: clumsy-coder/pihole-dashboard

####################################################################################################

jobs:
  # install npm packages and store them as cache.
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Cache node modules
        id: cache-primes
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      # skip npm ci if `package.json` didn't change
      # https://github.com/actions/cache#outputs
      # https://github.com/actions/cache#restoring-and-saving-cache-using-a-single-action
      - name: Install npm dependencies
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: npm ci --include=dev

  ################################################################################################
  # lint source code using ESlint and Typescript
  lint:
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Lint project
        run: npm run lint

  ################################################################################################
  # prepare docker built
  # extract the next version tag
  prepare-docker-build:
    needs: install
    runs-on: ubuntu-latest
    outputs:
      NEXT_VERSION: ${{ steps.set-env.outputs.NEXT_VERSION }}
      PUBLISH: ${{ steps.set-env.outputs.PUBLISH }}
      BUILD_DATE: ${{ steps.set-env.outputs.BUILD_DATE }}
      GIT_SHA: ${{ steps.set-env.outputs.GIT_SHA }}
      GIT_REF: ${{ steps.set-env.outputs.GIT_REF }}
      new-release-published: ${{ steps.get-next-version.outputs.new-release-published }}
      new-release-version: ${{ steps.get-next-version.outputs.new-release-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Extract next semantic-release version
        # run: npx semantic-release --dry-run --branches="*"
        run: npx semantic-release --dry-run
        id: get-next-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # needed in case semantic-release doesn't run on branches other than 'master' or 'development'
      - name: Set NEXT_VERSION if there's NO new release
        if: |
          steps.get-next-version.outputs.new-release-published == '' ||
          steps.get-next-version.outputs.new-release-published == 'false'
        run: |
          node -p "require('./package').version"
          node -p "require('./package').version" |  awk '{print "NEXT_VERSION=" $1}' >> "$GITHUB_ENV"
          echo "PUBLISH=false" >> "$GITHUB_ENV"

      - name: Set NEXT_VERSION if there's a NEW release
        if: steps.get-next-version.outputs.new-release-published == 'true'
        run: |
          echo ${{ steps.get-next-version.outputs.new-release-version }}
          echo "NEXT_VERSION=${{ steps.get-next-version.outputs.new-release-version }}" >> "$GITHUB_ENV"
          echo "PUBLISH=true" >> "$GITHUB_ENV"

      - name: Set Environment Variables
        id: set-env
        run: |
          {
            echo "NEXT_VERSION=$NEXT_VERSION"
            echo "PUBLISH=$PUBLISH"
            echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')"
            echo "GIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)"
            echo "GIT_REF=$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match)"
            # echo "GHCR_IMAGE=$(echo 'console.log("ghcr.io/${{ github.repository }}".toLowerCase())' | node -)" >> $GITHUB_ENV
          } | tee -a "$GITHUB_ENV" "$GITHUB_OUTPUT"

      - run: echo "$GITHUB_ENV"

  ################################################################################################

  test-reusable-workflow:
    needs: prepare-docker-build
    uses: ./.github/workflows/reusable-docker-build.yml
    with:
      publish: ${{ needs.prepare-docker-build.outputs.publish == 'true' }}
      tags: 'latest'
      labels: 'testing label'
    secrets: inherit

  # - name: test running workflow on call
  #   uses: ./.github/workflows/reusable-docker-build.yml
  #   with:
  #     publish: ${{ env.publish == 'true' }}
  #     tags: 'latest'
  #     labels: 'testing label'
  #   secrets: inherit

  # build docker image
  docker-build:
    # needs: extract-envs
    needs: prepare-docker-build
    runs-on: ubuntu-latest
    outputs:
      NEXT_VERSION: ${{ steps.dockerBuild-output.outputs.NEXT_VERSION }}
      new-release-published: ${{ steps.get-next-version.outputs.new-release-published }}
      new-release-version: ${{ steps.get-next-version.outputs.new-release-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: extract values from job prepare-docker-build to GITHUB_ENV
        run: |
          {
            echo "NEXT_VERSION=${{ needs.prepare-docker-build.outputs.next_version }}"
            echo "PUBLISH=${{ needs.prepare-docker-build.outputs.publish }}"
            echo "BUILD_DATE=${{ needs.prepare-docker-build.outputs.build_date }}"
            echo "GIT_SHA=${{ needs.prepare-docker-build.outputs.git_sha }}"
            echo "GIT_REF=${{ needs.prepare-docker-build.outputs.git_ref }}"
          } >> "$GITHUB_ENV"
          echo "$GITHUB_ENV"

      # - name: Extract next semantic-release version
      #   # run: npx semantic-release --dry-run --branches="*"
      #   run: npx semantic-release --dry-run
      #   id: get-next-version
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #
      # # needed in case semantic-release doesn't run on branches other than 'master' or 'development'
      # - name: Set NEXT_VERSION if there's NO new release
      #   if: |
      #     steps.get-next-version.outputs.new-release-published == '' ||
      #     steps.get-next-version.outputs.new-release-published == 'false'
      #   run: |
      #     echo $(node -p "require('./package').version")
      #     node -p "require('./package').version" |  awk '{print "NEXT_VERSION=" $1}' >> $GITHUB_ENV
      #
      # - name: Set NEXT_VERSION if there's a NEW release
      #   if: steps.get-next-version.outputs.new-release-published == 'true'
      #   run: |
      #     echo ${{ steps.get-next-version.outputs.new-release-version }}
      #     echo "NEXT_VERSION=${{ steps.get-next-version.outputs.new-release-version }}" >> $GITHUB_ENV
      #
      # - name: Set Environment Variables
      #   run: |
      #     echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
      #     echo "GIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
      #     echo "GIT_REF=$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match)" >> $GITHUB_ENV
      #     echo "GHCR_IMAGE=$(echo 'console.log("ghcr.io/${{ github.repository }}".toLowerCase())' | node -)" >> $GITHUB_ENV

      - run: echo "$GITHUB_ENV"

      - name: Create .env.local for NextJS
        run: |
          {
            printf "NEXT_PUBLIC_BUILD_VERSION=%s\n"                           "${{ env.NEXT_VERSION }}"
            printf "NEXT_PUBLIC_BUILD_ID=%s\n"                                "$(echo ${{ github.sha }} | cut -c -7)"
            printf "SECRET_COOKIE_PASSWORD=%s\n"                              "${{ secrets.SECRET_COOKIE_PASSWORD }}"
            printf "SECURE_COOKIE_TTL=%s\n"                                   "${{ secrets.SECURE_COOKIE_TTL }}"
            printf "NEXT_PUBLIC_POLLING_AUTH_SESSION=%s\n"                    "${{ secrets.NEXT_PUBLIC_POLLING_AUTH_SESSION }}"
            printf "NEXT_PUBLIC_POLLING_SUMMARY=%s\n"                         "${{ secrets.NEXT_PUBLIC_POLLING_SUMMARY }}"
            printf "NEXT_PUBLIC_POLLING_FORWARDED_DESTINATIONS=%s\n"          "${{ secrets.NEXT_PUBLIC_POLLING_FORWARDED_DESTINATIONS }}"
            printf "NEXT_PUBLIC_POLLING_QUERY_TYPES=%s\n"                     "${{ secrets.NEXT_PUBLIC_POLLING_QUERY_TYPES }}"
            printf "NEXT_PUBLIC_POLLING_TOP_PERMITTED_QUERIES=%s\n"           "${{ secrets.NEXT_PUBLIC_POLLING_TOP_PERMITTED_QUERIES }}"
            printf "NEXT_PUBLIC_POLLING_TOP_BLOCKED_QUERIES=%s\n"             "${{ secrets.NEXT_PUBLIC_POLLING_TOP_BLOCKED_QUERIES }}"
            printf "NEXT_PUBLIC_NUM_ENTRIES_TOP_PERMITTED_QUERIES=%s\n"       "${{ secrets.NEXT_PUBLIC_NUM_ENTRIES_TOP_PERMITTED_QUERIES }}"
            printf "NEXT_PUBLIC_NUM_ENTRIES_TOP_BLOCKED_QUERIES=%s\n"         "${{ secrets.NEXT_PUBLIC_NUM_ENTRIES_TOP_BLOCKED_QUERIES }}"
            printf "NEXT_PUBLIC_POLLING_TOP_CLIENTS_ALLOWED_QUERIES=%s\n"     "${{ secrets.NEXT_PUBLIC_POLLING_TOP_CLIENTS_ALLOWED_QUERIES }}"
            printf "NEXT_PUBLIC_POLLING_TOP_CLIENTS_BLOCKED_QUERIES=%s\n"     "${{ secrets.NEXT_PUBLIC_POLLING_TOP_CLIENTS_BLOCKED_QUERIES }}"
            printf "NEXT_PUBLIC_NUM_ENTRIES_TOP_CLIENTS_ALLOWED_QUERIES=%s\n" "${{ secrets.NEXT_PUBLIC_NUM_ENTRIES_TOP_CLIENTS_ALLOWED_QUERIES }}"
            printf "NEXT_PUBLIC_NUM_ENTRIES_TOP_CLIENTS_BLOCKED_QUERIES=%s\n" "${{ secrets.NEXT_PUBLIC_NUM_ENTRIES_TOP_CLIENTS_BLOCKED_QUERIES }}"
            printf "NEXT_PUBLIC_POLLING_QUERIES_OVERTIME=%s\n"                "${{ secrets.NEXT_PUBLIC_POLLING_QUERIES_OVERTIME }}"
            printf "NEXT_PUBLIC_POLLING_CLIENTS_OVERTIME=%s\n"                "${{ secrets.NEXT_PUBLIC_POLLING_CLIENTS_OVERTIME }}"
            printf "NEXT_PUBLIC_BUILD_TIME=%s\n"                              "$(date +%s)"
          } >> .env.local

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v4.6.0
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.description=Created from commit ${{ env.GIT_SHA }} and ref ${{ env.GIT_REF }}
            org.opencontainers.image.ref.name=${{ env.GIT_REF }}
            org.opencontainers.image.version=${{ env.NEXT_VERSION }}


      - name: Build docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./dockerfile
          pull: true
          load: true
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NEXT_VERSION }}
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          labels: |
            ${{ steps.meta.outputs.labels }}

      # adding a duplicate run for building docker image is because,
      # the nightly build will have a different value for the label `org.opencontainers.image.version`
      - name: Build `nightly` docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./dockerfile
          pull: true
          load: true
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:nightly
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          labels: |
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.description=Created from commit ${{ env.GIT_SHA }} and ref ${{ env.GIT_REF }}
            org.opencontainers.image.ref.name=${{ env.GIT_REF }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=nightly


      - name: View current docker images
        run: docker images

      - name: Push `nightly` Docker image to Github Container Registry
        if: github.ref == 'refs/heads/development'
        run: docker push ${{ env.GHCR_IMAGE }}:nightly

      - name: Push Docker images to GitHub Container Registry
        # only push if on master branch AND there's a new version to push
        if: env.PUBLISH == 'true'
        run: |
          docker push ${{ env.GHCR_IMAGE }}:latest
          docker push ${{ env.GHCR_IMAGE }}:${{ env.NEXT_VERSION }}

  ################################################################################################

  semantic-release:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/development'
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - run: npm install --production=false

      - name: semantic-release
        run: npx semantic-release --ci
        env:
          GITHUB_TOKEN: ${{ secrets.DEPENDABOT_TOKEN }}
####################################################################################################
