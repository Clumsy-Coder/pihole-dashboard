name: NextJS build and release
# description: lint, test, build and release NextJS
on: push

env:
  FORCE_COLOR: true # display terminal colors
  # APP_NAME: app_name
  # GHCR_IMAGE: ghcr.io/<user>/<repo name>

####################################################################################################

jobs:
  # install npm packages and store them as cache.
  install:
    runs-on: ubuntu-latest
    outputs:
      npm-cache-dir: ${{ steps.npm-cache-dir.outputs.dir }}
    steps:
      - uses: actions/checkout@v2

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache node modules
        uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: |
            **/node_modules
            ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install npm dependencies
        run: npm install --production=false

  ################################################################################################
  # lint source code using ESlint and Typescript
  lint:
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: |
            **/node_modules
            ${{ needs.install.outputs.npm-cache-dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Lint project
        run: npm run lint

  ################################################################################################
  # extract semantic-release project next version and store them as github outputs.
  # Will be used for building docker images
  extract-envs:
    needs: install
    runs-on: ubuntu-latest
    outputs:
      NEXT_VERSION: ${{ steps.next-version.outputs.NEXT_VERSION }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: |
            **/node_modules
            ${{ needs.install.outputs.npm-cache-dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # applies new version to package.json
      # if there's no new version, package.json version will remain unchanged
      - name: extract next version and apply to package.json
        run: npx semantic-release -d | grep 'Release note' | grep -Po '(\d+)\.(\d+)\.(\d+)' | xargs npm version --allow-same-version --no-git-tag-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: store NEXT_VERSION as env
        run: |
          node -p "require('./package').version" |  awk '{print "NEXT_VERSION=" $1}' >> $GITHUB_ENV
          echo ${{ env.NEXT_VERSION }}

      - name: store NEXT_VERSION to github output
        id: next-version
        run: echo "::set-output name=NEXT_VERSION::${{ env.NEXT_VERSION }}"

  ################################################################################################
  # build docker image
  # uses envs extracted from job "extract-env"
  # uses envs from global env
  docker-build:
    needs: extract-envs
    runs-on: ubuntu-latest
    outputs:
      NEXT_VERSION: ${{ steps.dockerBuild-output.outputs.NEXT_VERSION }}
      LATEST_GIT_TAG: ${{ steps.dockerBuild-output.outputs.LATEST_GIT_TAG }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Environment Variables
        run: |
          echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "GIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          echo "GIT_REF=$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match)" >> $GITHUB_ENV
          echo "NEXT_VERSION=${{ needs.extract-envs.outputs.NEXT_VERSION }}" >> $GITHUB_ENV
          echo "LATEST_GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "GHCR_IMAGE=$(echo 'console.log("ghcr.io/${{ github.repository }}".toLowerCase())' | node -)" >> $GITHUB_ENV

      - name: Create .env.local for NextJS
        run: |
          printf 'NEXT_PUBLIC_BUILD_VERSION=%s\n' '${{ env.NEXT_VERSION }}' >> .env.local
          printf 'NEXT_PUBLIC_BUILD_ID=%s\n' $(echo ${{ github.sha }} | cut -c -7) >> .env.local

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./dockerfile
          pull: true
          load: true
          tags: |
            ${{ env.GHCR_IMAGE }}:latest
            ${{ env.GHCR_IMAGE }}:${{ env.NEXT_VERSION }}
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          labels: |
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.description=Created from commit ${{ env.GIT_SHA }} and ref ${{ env.GIT_REF }}
            org.opencontainers.image.ref.name=${{ env.GIT_REF }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ env.NEXT_VERSION }}

      - name: View current docker images
        run: docker images

      - name: Push Docker images to GitHub Container Registry
        # only push if on master branch AND there's a new version to push
        if: ${{ github.ref == 'refs/heads/master' && env.NEXT_VERSION != env.LATEST_GIT_TAG }}
        run: |
          docker push ${{ env.GHCR_IMAGE }}:latest
          docker push ${{ env.GHCR_IMAGE }}:${{ env.NEXT_VERSION }}

      - name: store NEXT_VERSION and LATEST_GIT_TAG to github output
        id: dockerBuild-output
        run: |
          echo "::set-output name=NEXT_VERSION::${{ env.NEXT_VERSION }}"
          echo "::set-output name=LATEST_GIT_TAG::${{ env.LATEST_GIT_TAG }}"

  ################################################################################################

  semantic-release:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/development'
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: |
            **/node_modules
            ${{ needs.install.outputs.npm-cache-dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm install --production=false

      - name: semantic-release
        run: npx semantic-release --dry-run ${{github.ref != 'refs/heads/master'}} --ci ${{github.ref == 'refs/heads/master'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
####################################################################################################
