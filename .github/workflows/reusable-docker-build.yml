---

name: Build and push Docker image

# When calling this workflow, ensure you use
#   secrets: inherit
# So the DOCKER_USERNAME and DOCKER_PASSWORD are available.

on:
  workflow_call:
    inputs:
      publish:
        type: boolean
        description: Whether to publish the image to Github Registry
        required: false
        default: false
      tags:
        type: string
        required: true
        description: docker image version
      labels:
        type: string
        required: true
        description: docker image labels

env:
  FORCE_COLOR: true
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: clumsy-coder/pihole-dashboard

jobs:
  build-and-push:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: generate GIT_SHA and GIT_REF to GITHUB_ENV
        run: |
          {
            echo "GIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)"
            echo "GIT_REF=$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match)"
          } >> "$GITHUB_ENV"

      - name: Create .env.local for NextJS
        run: |
          {
            printf "NEXT_PUBLIC_BUILD_VERSION=%s\n"                           "${{ env.NEXT_VERSION }}"
            printf "NEXT_PUBLIC_BUILD_ID=%s\n"                                "$(echo ${{ github.sha }} | cut -c -7)"
            printf "SECRET_COOKIE_PASSWORD=%s\n"                              "${{ secrets.SECRET_COOKIE_PASSWORD }}"
            printf "SECURE_COOKIE_TTL=%s\n"                                   "${{ secrets.SECURE_COOKIE_TTL }}"
            printf "NEXT_PUBLIC_POLLING_AUTH_SESSION=%s\n"                    "${{ secrets.NEXT_PUBLIC_POLLING_AUTH_SESSION }}"
            printf "NEXT_PUBLIC_POLLING_SUMMARY=%s\n"                         "${{ secrets.NEXT_PUBLIC_POLLING_SUMMARY }}"
            printf "NEXT_PUBLIC_POLLING_FORWARDED_DESTINATIONS=%s\n"          "${{ secrets.NEXT_PUBLIC_POLLING_FORWARDED_DESTINATIONS }}"
            printf "NEXT_PUBLIC_POLLING_QUERY_TYPES=%s\n"                     "${{ secrets.NEXT_PUBLIC_POLLING_QUERY_TYPES }}"
            printf "NEXT_PUBLIC_POLLING_TOP_PERMITTED_QUERIES=%s\n"           "${{ secrets.NEXT_PUBLIC_POLLING_TOP_PERMITTED_QUERIES }}"
            printf "NEXT_PUBLIC_POLLING_TOP_BLOCKED_QUERIES=%s\n"             "${{ secrets.NEXT_PUBLIC_POLLING_TOP_BLOCKED_QUERIES }}"
            printf "NEXT_PUBLIC_NUM_ENTRIES_TOP_PERMITTED_QUERIES=%s\n"       "${{ secrets.NEXT_PUBLIC_NUM_ENTRIES_TOP_PERMITTED_QUERIES }}"
            printf "NEXT_PUBLIC_NUM_ENTRIES_TOP_BLOCKED_QUERIES=%s\n"         "${{ secrets.NEXT_PUBLIC_NUM_ENTRIES_TOP_BLOCKED_QUERIES }}"
            printf "NEXT_PUBLIC_POLLING_TOP_CLIENTS_ALLOWED_QUERIES=%s\n"     "${{ secrets.NEXT_PUBLIC_POLLING_TOP_CLIENTS_ALLOWED_QUERIES }}"
            printf "NEXT_PUBLIC_POLLING_TOP_CLIENTS_BLOCKED_QUERIES=%s\n"     "${{ secrets.NEXT_PUBLIC_POLLING_TOP_CLIENTS_BLOCKED_QUERIES }}"
            printf "NEXT_PUBLIC_NUM_ENTRIES_TOP_CLIENTS_ALLOWED_QUERIES=%s\n" "${{ secrets.NEXT_PUBLIC_NUM_ENTRIES_TOP_CLIENTS_ALLOWED_QUERIES }}"
            printf "NEXT_PUBLIC_NUM_ENTRIES_TOP_CLIENTS_BLOCKED_QUERIES=%s\n" "${{ secrets.NEXT_PUBLIC_NUM_ENTRIES_TOP_CLIENTS_BLOCKED_QUERIES }}"
            printf "NEXT_PUBLIC_POLLING_QUERIES_OVERTIME=%s\n"                "${{ secrets.NEXT_PUBLIC_POLLING_QUERIES_OVERTIME }}"
            printf "NEXT_PUBLIC_POLLING_CLIENTS_OVERTIME=%s\n"                "${{ secrets.NEXT_PUBLIC_POLLING_CLIENTS_OVERTIME }}"
            printf "NEXT_PUBLIC_BUILD_TIME=%s\n"                              "$(date +%s)"
          } >> .env.local
          cat .env.local

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v4.6.0
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.description=Created from commit ${{ env.GIT_SHA }} and ref ${{ env.GIT_REF }}
            org.opencontainers.image.ref.name=${{ env.GIT_REF }}
            org.opencontainers.image.version=${{ inputs.tags }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./dockerfile
          pull: true
          push: ${{ inputs.publish }}
          load: true
          tags: ${{ inputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: View current docker images
        run: docker images
